// Last updated: 16/10/2025, 11:44:24 am
class Solution {
		public boolean isBipartite(int[][] graph) {
			Queue<BipartitePair> q = new LinkedList<>();
			HashMap<Integer, Integer> visited = new HashMap<>();
			for (int i = 0; i < graph.length; i++) { // vtx mil jayege
				if(visited.containsKey(i)) {
					continue;
				}
				q.add(new BipartitePair(i,0));
				
				while(!q.isEmpty()) {
					// 1. Remove
					BipartitePair rp = q.poll();
					
					// 2. Ignore if Already Visited
					if(visited.containsKey(rp.vtx)) {
						if(visited.get(rp.vtx)!=rp.dis) {
							return false;
						}
						continue;
						
					}
					
					// 3. Marked Visited
					visited.put(rp.vtx, rp.dis);
					
					// 4. Self Work
					// 5. Add Unvisited nbrs
					for(int nbrs:graph[rp.vtx]) {
						if(!visited.containsKey(nbrs)) {
							q.add(new BipartitePair(nbrs,rp.dis+1));
						}
					}
				}
				
			}
			return true;

		}
	}

	class BipartitePair {
		int vtx;
		int dis;
		public BipartitePair(int vtx,int dis) {
			this.vtx = vtx;
			this.dis = dis;
		}
	}